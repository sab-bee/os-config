{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:

  "console.log": {
    "prefix": "clog",
    "body": ["console.log($0)"]
  },

  "conditional If": {
    "prefix": "if",
    "body": ["if($0)"]
  },

  "Function": {
    "prefix": "fn",
    "body": ["function ${1:name}(${2:arg}) {$0}"],
    "description": "write function"
  },

  "Arrow function": {
    "prefix": "arrow",
    "body": ["const ${1:name} = (${2:arg}) => {$0}"]
  },

  "Anonymous arrow function": {
    "prefix": ">>",
    "body": ["(${1}) => $0"]
  },

  "Styled components": {
    "prefix": "sc",
    "body": ["export const ${1:element} = styled.${2:element}`\n\t${0}\n`"]
  },

  "import * as S styled component": {
    "prefix": "*",
    "body": ["import * as S from './$0'"]
  },

  "import styled from styled-components": {
    "prefix": "istyled",
    "body": ["import styled from 'styled-components'"]
  },

  "custom fetch snippets for js": {
    "prefix": "dfetch",
    "body": [
      "fetch(${1:url})\n.then(res => res.json())\n.then(data => {\n${2:\tconsole.log}(data)\n})"
    ]
  },

  "use state": {
    "prefix": "cstate",
    "body": ["const [${1:name}, set${1/(.*)/${1:/capitalize}/}] = useState$0($2)"]
  },

  "use effect": {
    "prefix": "ueffect",
    "body": ["useEffect$0 (() => {\t\n},[${1:dependency}])"]
  },
  "router route": {
    "prefix": "route",
    "body": "<Route path='$1' element={<$0/>}></Route>"
  },
  "route element": {
    "prefix": "element",
    "body": "element={$0}"
  },
  "jsx tag": {
    "prefix": "tag",
    "body": "<$1>$0</$1>"
  }
}
